name: CI Build

on:
  push:
    branches: [ master ]
jobs:
  test:
    name: Build - Test - Release
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      # SemVer
      - name: Semantic Version
        id: Semver
        run: |-
          chmod +x .github/semver.sh
          ./.github/semver.sh
      # Setup JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      # Cache
      - name: Cache Packages
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2
          restore-keys: ${{ runner.os }}-m2
      # Gradle Build
      - name: Build and Test with Gradle
        run: gradle build -Pversion=$VERSION

      # SonarCloud Cache
#      - name: Cache SonarCloud packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
      # SonarCloud Package
#      - name: Cache Gradle packages
#        uses: actions/cache@v1
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: ${{ runner.os }}-gradle

      # SonarCloud Build and Analyze
#      - name: Build and analyze Sonar
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: gradle -Drevision=$VERSION build sonarqube --info

      # Publish GitHub Packages
      - name: Publish package to GitHub Packages
        if: ${{ env.PREVIOUS_VERSION  != env.VERSION }}
        run: gradle publish -Pversion=$VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # GtHub Changelog
      - name: GitHub Changelog
        if: ${{ env.PREVIOUS_VERSION  != env.VERSION }}
        id: Changelog
        uses: scottbrenner/generate-changelog-action@master
        env:
          REPO: ${{ github.repository }}

      # GtHub Release
      - name: GitHub Release
        if: ${{ env.PREVIOUS_VERSION  != env.VERSION }}
        id: CreateRelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: false
          prerelease: false
